// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.8
// Revision: 3d844c8ecc59661ed7aa17bfd65727bc06a60ad8
// Build Date: 2023-09-18T14:55:21Z
// Built By: goreleaser

package config

import (
	"fmt"
	"strings"
)

const (
	// SourceTypeLocal is a SourceType of type local.
	SourceTypeLocal SourceType = "local"
	// SourceTypeGit is a SourceType of type git.
	SourceTypeGit SourceType = "git"
)

var ErrInvalidSourceType = fmt.Errorf("not a valid SourceType, try [%s]", strings.Join(_SourceTypeNames, ", "))

var _SourceTypeNames = []string{
	string(SourceTypeLocal),
	string(SourceTypeGit),
}

// SourceTypeNames returns a list of possible string values of SourceType.
func SourceTypeNames() []string {
	tmp := make([]string, len(_SourceTypeNames))
	copy(tmp, _SourceTypeNames)
	return tmp
}

// String implements the Stringer interface.
func (x SourceType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x SourceType) IsValid() bool {
	_, err := ParseSourceType(string(x))
	return err == nil
}

var _SourceTypeValue = map[string]SourceType{
	"local": SourceTypeLocal,
	"git":   SourceTypeGit,
}

// ParseSourceType attempts to convert a string to a SourceType.
func ParseSourceType(name string) (SourceType, error) {
	if x, ok := _SourceTypeValue[name]; ok {
		return x, nil
	}
	return SourceType(""), fmt.Errorf("%s is %w", name, ErrInvalidSourceType)
}

// MarshalText implements the text marshaller method.
func (x SourceType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *SourceType) UnmarshalText(text []byte) error {
	tmp, err := ParseSourceType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// Set implements the Golang flag.Value interface func.
func (x *SourceType) Set(val string) error {
	v, err := ParseSourceType(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *SourceType) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *SourceType) Type() string {
	return "SourceType"
}
